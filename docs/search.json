[
  {
    "objectID": "teaching/smgt430/index.html",
    "href": "teaching/smgt430/index.html",
    "title": "SMGT 430/530: Introduction to Sport Analytics",
    "section": "",
    "text": "Syllabus"
  },
  {
    "objectID": "teaching/smgt430/index.html#unit-1-estimating-team-and-player-strength",
    "href": "teaching/smgt430/index.html#unit-1-estimating-team-and-player-strength",
    "title": "SMGT 430/530: Introduction to Sport Analytics",
    "section": "Unit 1: Estimating Team and Player Strength",
    "text": "Unit 1: Estimating Team and Player Strength\n\nPythagorean Formula\nLecture Notes\nColab Notebok\nAssignment #1: Pythagorean Formula\n\n\nBradley-Terry Model\nLecture Notes\nColab Notebook\nAssignment #2: Bradley-Terry Model\n\n\nPlus-Minus Models\nLecture Notes"
  },
  {
    "objectID": "teaching/smgt430/index.html#unit-2-reducing-noise-in-player-evaluation",
    "href": "teaching/smgt430/index.html#unit-2-reducing-noise-in-player-evaluation",
    "title": "SMGT 430/530: Introduction to Sport Analytics",
    "section": "Unit 2: Reducing Noise in Player Evaluation",
    "text": "Unit 2: Reducing Noise in Player Evaluation\n\nRegression to the Mean\nLecture Notes\nColab Notebook\nAssignment #3: Regression to the Mean\n\n\nRegularized Regression\nLecture Notes\nColab Notebook: Regularized Rasch Model\n\n\nRegularized Adjusted Plus-Minus\nColab Notebook: Regularized Adjusted Plus-Minus\nAssignment #4: Regularized Regression"
  },
  {
    "objectID": "teaching/smgt430/index.html#unit-3-applications-of-markov-chains-in-sports",
    "href": "teaching/smgt430/index.html#unit-3-applications-of-markov-chains-in-sports",
    "title": "SMGT 430/530: Introduction to Sport Analytics",
    "section": "Unit 3: Applications of Markov Chains in Sports",
    "text": "Unit 3: Applications of Markov Chains in Sports\n\nWin Probability Models\nColab Notebook\nAssignment #5: Win Probability Model"
  },
  {
    "objectID": "teaching/smgt430/index.html#unit-4-practicum",
    "href": "teaching/smgt430/index.html#unit-4-practicum",
    "title": "SMGT 430/530: Introduction to Sport Analytics",
    "section": "Unit 4: Practicum",
    "text": "Unit 4: Practicum\nProject Overview\nAssignment #6: YouTube Short\nAssignment: Article Review (SMGT 530 only)"
  },
  {
    "objectID": "teaching/smgt430/index.html#lessons-from-sport-analytics",
    "href": "teaching/smgt430/index.html#lessons-from-sport-analytics",
    "title": "SMGT 430/530: Introduction to Sport Analytics",
    "section": "Lessons from Sport Analytics",
    "text": "Lessons from Sport Analytics\nColab Notebook: Introduction to R\n\nBe careful with regression\nColab Notebook\n\n\nDon’t be fooled by noise\nLecture Notes\nColab Notebook"
  },
  {
    "objectID": "teaching/smgt432/index.html",
    "href": "teaching/smgt432/index.html",
    "title": "SMGT 432: Soccer Analytics",
    "section": "",
    "text": "This course page is less built out than my other course pages.\nSyllabus"
  },
  {
    "objectID": "teaching/smgt432/index.html#lecture-notes",
    "href": "teaching/smgt432/index.html#lecture-notes",
    "title": "SMGT 432: Soccer Analytics",
    "section": "Lecture Notes",
    "text": "Lecture Notes\nBradley-Terry\nValidation and Regularization\nPlus-Minus\nA Lite Survey of Research with Tracking Data\nA Brief History of Tactics"
  },
  {
    "objectID": "teaching/smgt432/index.html#python-notebooks",
    "href": "teaching/smgt432/index.html#python-notebooks",
    "title": "SMGT 432: Soccer Analytics",
    "section": "Python Notebooks",
    "text": "Python Notebooks\nGitHub repository"
  },
  {
    "objectID": "teaching/smgt432/index.html#assignments",
    "href": "teaching/smgt432/index.html#assignments",
    "title": "SMGT 432: Soccer Analytics",
    "section": "Assignments",
    "text": "Assignments"
  },
  {
    "objectID": "teaching/smgt435/index.html",
    "href": "teaching/smgt435/index.html",
    "title": "SMGT 435/535: Baseball Analytics",
    "section": "",
    "text": "Syllabus"
  },
  {
    "objectID": "teaching/smgt435/index.html#unit-1-measuring-batting-performance",
    "href": "teaching/smgt435/index.html#unit-1-measuring-batting-performance",
    "title": "SMGT 435/535: Baseball Analytics",
    "section": "Unit 1: Measuring Batting Performance",
    "text": "Unit 1: Measuring Batting Performance\n\nPythagorean Formula\nLecture Notes\nColab Notebook\n\n\nBase-Out Run Expectancy and Linear Weight\nLecture Notes\nColab Notebook\n\n\nBatted Ball Outcome Model\nLecture Notes\nColab Notebook\nAssignment #1: Signal v. Noise in Batter Outcomes"
  },
  {
    "objectID": "teaching/smgt435/index.html#unit-2-measuring-pitching-performance",
    "href": "teaching/smgt435/index.html#unit-2-measuring-pitching-performance",
    "title": "SMGT 435/535: Baseball Analytics",
    "section": "Unit 2: Measuring Pitching Performance",
    "text": "Unit 2: Measuring Pitching Performance\n\nBABIP, FIP and DIPS\nColab Notebook\nAssignment #2: Signal v. Noise in Pitcher Outcomes\n\n\nIntroduction to Pitch-Level Analysis\nLecture Notes\nColab Notebook\n\n\nPitch Outcome Modeling\nLecture Notes\nColab Notebook\nAssignment #3: Pitch Outcome Model\n\n\n“Stuff”\nLecture Notes\nColab Notebook"
  },
  {
    "objectID": "teaching/smgt435/index.html#unit-3-valuing-player-performance",
    "href": "teaching/smgt435/index.html#unit-3-valuing-player-performance",
    "title": "SMGT 435/535: Baseball Analytics",
    "section": "Unit 3: Valuing Player Performance",
    "text": "Unit 3: Valuing Player Performance\n\nFielding and Baserunning\nColab Notebook\n\n\nProjections\nColab Notebook"
  },
  {
    "objectID": "teaching/smgt435/index.html#unit-4-practicum",
    "href": "teaching/smgt435/index.html#unit-4-practicum",
    "title": "SMGT 435/535: Baseball Analytics",
    "section": "Unit 4: Practicum",
    "text": "Unit 4: Practicum\nProject Overview"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scott Powers",
    "section": "",
    "text": "I am an Assistant Professor of Sport Analytics and of Statistics at Rice University. Much of my work involves what team front offices want to know: (a) how to measure individual contributions to team success in team sports and (b) how to squeeze optimal estimates of player talent from limited data. Building on these results, I research what league offices want to know: how teams and players respond to incentives, from a game theoretic perspective. I want to understand how leagues can design these incentives to promote the health of their sport. My favorite tools for these problems tend to come from statistical machine learning (regularized regression, gradient boosting, etc.) although I am also partial to Bayesian models when appropriate (and when the computational cost is reasonable). My favorite sports are baseball, soccer and volleyball.\nI completed my PhD in statistics at Stanford University in 2017. From there, I worked for the Los Angeles Dodgers in R&D for five years and then spent one season as an Assistant General Manager with the Houston Astros before joining Rice in 2023. Along the way, I have held multiple-year consulting engagements with the Oakland Athletics (baseball), AZ Alkmaar (soccer) and Zelus Analytics (baseball and soccer).\n\nIn the news\n2024-09-05 Looking for friends among baseball’s most passionate nerds\nDefector\n2024-02-13 ​​Scott Powers: Major league analyst acing Rice\nThe Rice Thresher\n2023-09-27 What volleyball can tell us about what’s missing in MLB analytics\nThe Orange County Register\n2022-11-11 Astros fire assistant general manager Scott Powers\nMLB Trade Rumors\n2022-01-03 Dodgers executive leaving for Astros front office is traitorous activity\nDodgers Way"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Powers S, Stancil L, Consiglio N\nEstimating individual contributions to team success in women’s college volleyball"
  },
  {
    "objectID": "research.html#preprints",
    "href": "research.html#preprints",
    "title": "Research",
    "section": "",
    "text": "Powers S, Stancil L, Consiglio N\nEstimating individual contributions to team success in women’s college volleyball"
  },
  {
    "objectID": "research.html#conference-presentations",
    "href": "research.html#conference-presentations",
    "title": "Research",
    "section": "Conference Presentations",
    "text": "Conference Presentations\n2024 Saberseminar (Chicago) slides, video\n“Swinging, Fast and Slow: Untangling intention and timing error from bat speed and swing length”\nJoint work w/ Ron Yurko\n2024 Sloan Sports Analytics Conference (Boston) slides, video\n“Spotlighting under-the-radar performers in women’s college volleyball”\nJoint work w/ Luke Stancil and Naomi Consiglio\n2023 New England Symposium on Statistics in Sports (Boston) slides, video\n“Estimating individual contributions to team success in women’s college volleyball”\nJoint work w/ Luke Stancil and Naomi Consiglio\n2023 Saberseminar (Chicago) slides, video\n“Pitch trajectory density estimation for predicting future outcomes”\nJoint work w/ Vicente Iglesias\n2016 Saberseminar (Boston) slides\n“Jointly predicting exit velocity and launch angle for batter-pitcher matchups”\n2016 Joint Statistical Meetings (Chicago) slides\n“Nuclear penalized multinomial regression for predicting at bat outcomes in baseball”\nJoint work w/ Trevor Hastie and Rob Tibshirani\n2016 SABR Analytics Conference (Phoenix) slides\n“True wOBA: Estimation of true talent level for batters”\nJoint work w/ Eli Shayer\n2015 Saberseminar (Boston) slides\n“Rewarding batters for baserunner advancement: A ridge-regressed Rasch model”"
  },
  {
    "objectID": "research.html#peer-reviewed-publications",
    "href": "research.html#peer-reviewed-publications",
    "title": "Research",
    "section": "Peer Reviewed Publications",
    "text": "Peer Reviewed Publications\n\nSports\nPowers S, Hastie T, Tibshirani R (2018)\nNuclear penalized multinomial regression with an application to predicting at bat outcomes in baseball\nStatistical Modelling 18(5-6) 388-410\nBurton T, Powers S (2015)\nA linear model for estimating optimal service fraction in volleyball\nJournal of Quantitative Analysis in Sports 11 117-129\nSaavedra S, Powers S, McCotter T, Porter MA, Mucha PJ (2010)\nMutually-antagonistic interactions in baseball networks\nPhysica A: Statistical Mechanics and its Applications 389 1131-1141\n\n\nNot Sports\nBurton T, Powers S, Burns C, Conway G, Leach F, Senecal K (2023)\nA data-driven greenhouse gas emission rate analysis for vehicle comparisons\nSAE International Journal of Electrified Vehicles 12(1)\nPowers S, McGuire V, Bernstein L, Canchola AJ, Whittemore AS (2019)\nEvaluating disease prediction models using a cohort whose covariate distribution differs from that of the target population\nStatistical Methods in Medical Research 28(1) 309-320\nPowers S, Qian J, Jung K, Schuler A, Shah NH, Hastie T, Tibshirani R (2018)\nSome methods for heterogeneous treatment effect estimation in high dimensions\nStatistics in Medicine 37(11) 1767-1787\nMcGinnis L, Powers S, Bangs D, Cherry A, Tibshirani R, Natkunam Y (2016)\nDouble-hit diffuse large B-cell lymphomas with MYC gene rearrangements more commonly involve BCL2 than BCL6 gene rearrangements as the second hit: A large scale single institution study\nLaboratory Investigation 96 362A\nPowers S, Hastie T, Tibshirani R (2015)\nCustomized training with an application to mass spectrometric imaging of cancer tissue\nThe Annals of Applied Statistics 9 1709-1725\nPowers S, DeJongh M, Best AA, Tintle NL (2015)\nCautions about the reliability of pairwise gene correlations based on expression data\nFrontiers in Microbiology 6 650\nPowers S, Gopalakrishnan S, Tintle NL (2011)\nAssessing the impact of non-differential genotyping errors on rare variant tests of association\nHuman Heredity 72 153-160\nLuedtke A, Powers S, Petersen A, Sitarik A, Bekmetjev A, Tintle NL (2011)\nEvaluating methods for the analysis of rare variants in sequence data\nBMC Proceedings 5 S119\nPetersen A, Sitarik A, Luedtke A, Powers S, Bekmetjev A, Tintle NL (2011)\nEvaluating methods for combining rare variant data in pathway-based tests of genetic association\nBMC Proceedings 5 S48"
  },
  {
    "objectID": "research.html#magazineblog-articles",
    "href": "research.html#magazineblog-articles",
    "title": "Research",
    "section": "Magazine/Blog Articles",
    "text": "Magazine/Blog Articles\nPowers S (2016)\nToward a Probability Distribution over Batted-Ball Trajectories\nThe Hardball Times (not peer reviewed)\nSmith RL, Powers S, Cisewski J (2014)\nQualifying Times for the Boston Marathon\nCHANCE (not peer reviewed)"
  },
  {
    "objectID": "research.html#student-presentations",
    "href": "research.html#student-presentations",
    "title": "Research",
    "section": "Student Presentations",
    "text": "Student Presentations\n\nTalks\nHahn J, Powers S, Pai M, Schaefer A\nThe Two-Foot Rule: A game theoretic analysis of the pickoff limit in Major League Baseball\nPresented at Saberseminar 2024\nBrover J, Powers S\nDo we learn more about AAA batters when they face better pitches?\nPresented at Saberseminar 2024\nHaugen D, Powers S\nTime warping for clustering pitcher deliveries\nPresented at Saberseminar 2024\n\n\nPosters\nKang A, Powers S, Curson T\nNot All Features Are Created Equal: Player clustering and evaluation\nPresented at Opta Forum 2024"
  },
  {
    "objectID": "lab.html",
    "href": "lab.html",
    "title": "Lab",
    "section": "",
    "text": "Elizabeth Sepúlveda (BA Statistics and BA Sport Analytics, exp. 2025)\nJudy Zhu (BA Mathematics w/ Data Science minor, exp. 2025)\nElisabeth Millington (BA Sports Medicine and Exercise Physiology and BA Sport Analytics, exp. 2026)\nZach Pool (BS Computer Science, exp. 2026)\nRahul Hererro (BA Mathematical Economic Analysis and BA Sport Analytics, exp. 2027)\nLou Zhou (BA Statistics and BA Sport Analytics, exp. 2027)"
  },
  {
    "objectID": "lab.html#current-students",
    "href": "lab.html#current-students",
    "title": "Lab",
    "section": "",
    "text": "Elizabeth Sepúlveda (BA Statistics and BA Sport Analytics, exp. 2025)\nJudy Zhu (BA Mathematics w/ Data Science minor, exp. 2025)\nElisabeth Millington (BA Sports Medicine and Exercise Physiology and BA Sport Analytics, exp. 2026)\nZach Pool (BS Computer Science, exp. 2026)\nRahul Hererro (BA Mathematical Economic Analysis and BA Sport Analytics, exp. 2027)\nLou Zhou (BA Statistics and BA Sport Analytics, exp. 2027)"
  },
  {
    "objectID": "lab.html#graduate-mentor",
    "href": "lab.html#graduate-mentor",
    "title": "Lab",
    "section": "Graduate Mentor",
    "text": "Graduate Mentor\nRose Graves (PhD student in Statistics)"
  },
  {
    "objectID": "lab.html#alumni",
    "href": "lab.html#alumni",
    "title": "Lab",
    "section": "Alumni",
    "text": "Alumni\nNaomi Consiglio (BA Statistics and BA Sport Analytics, exp. 2025)\nJacob Hahn (BA Statistics and BA Sport Analytics, exp. 2025)\nJeff Brover (BA Statistics and BA Sport Analytics, 2024)\nLuke Stancil (BA Economics and BA Computational and Applied Mathematics, 2024)"
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "Software",
    "section": "",
    "text": "sabRmetrics — Query {statsapi,baseballsavant}.mlb.com and fit fundamental sabermetric models"
  },
  {
    "objectID": "software.html#r-packages",
    "href": "software.html#r-packages",
    "title": "Software",
    "section": "",
    "text": "sabRmetrics — Query {statsapi,baseballsavant}.mlb.com and fit fundamental sabermetric models"
  },
  {
    "objectID": "teaching/smgt435/notebook/pythagorean_formula_solutions.html",
    "href": "teaching/smgt435/notebook/pythagorean_formula_solutions.html",
    "title": "Scott Powers",
    "section": "",
    "text": "EXERCISE #1\nThe following endpoint returns a JSON of all regular season games from the 2024 season:\nhttp://statsapi.mlb.com:80/api/v1/schedule?sportId=1&gameType=R&startDate=01/01/2024&endDate=12/31/2024\nUse this end point to download a MLB regular season game scores from 2021 through 2024, inclusive. For every game, let’s get: * The ID, year and date of the game * The ID, name and score of the home team * The ID, name and score of the away team\nCAUTION: Note that you can only download one year at a time using this API.\n\n# Here's some initial code to get you started                                                     #\n\nget_schedule &lt;- function(year) {                                                                  #\n\n  schedule_filter &lt;- glue::glue(\"sportId=1&gameType=R&startDate=01/01/{year}&endDate=12/31/{year}\")\n  endpoint &lt;- glue::glue(\"http://statsapi.mlb.com:80/api/v1/schedule?{schedule_filter}\")          #\n  schedule_json &lt;- jsonlite::fromJSON(endpoint, flatten = TRUE)                                   #\n\n  schedule &lt;- do.call(dplyr::bind_rows, args = schedule_json$dates$games)                         #\n  # schedule is a dataframe with one row for each game                                            #\n\n  game &lt;- schedule |&gt;                                                                             #\n    dplyr::select(                                                                                #\n      game_id = gamePk, season, game_date = gameDate,                                             #\n      team_id_home = teams.home.team.id, team_name_home = teams.home.team.name, score_home = teams.home.score,\n      team_id_away = teams.away.team.id, team_name_away = teams.away.team.name, score_away = teams.away.score\n    ) |&gt;                                                                                          #\n    dplyr::filter(!is.na(score_home), !is.na(score_away))   # remove games that haven't been played\n\n  return(game)                                                                                    #\n}                                                                                                 #\n\ngame &lt;- NULL                                                                                      #\n\nfor (year in 2021:2024) {                                                                         #\n  game &lt;- dplyr::bind_rows(game, get_schedule(year))                                              #\n}                                                                                                 #\n\nEXERCISE #2\nCalculate each team’s winning percentage in each season.\n\nresult_home &lt;- game |&gt;                                                                            #\n  dplyr::group_by(season, team_id = team_id_home, team_name = team_name_home) |&gt;                  #\n  dplyr::summarize(                                                                               #\n    wins = sum(score_home &gt; score_away),                                                          #\n    losses = sum(score_home &lt; score_away),                                                        #\n    .groups = \"drop\"                                                                              #\n  )                                                                                               #\n\nresult_away &lt;- game |&gt;                                                                            #\n  dplyr::group_by(season, team_id = team_id_away, team_name = team_name_away) |&gt;                  #\n  dplyr::summarize(                                                                               #\n    wins = sum(score_home &lt; score_away),                                                          #\n    losses = sum(score_home &gt; score_away),                                                        #\n    .groups = \"drop\"                                                                              #\n  )                                                                                               #\n\nrecord &lt;- dplyr::bind_rows(result_home, result_away) |&gt;                                           #\n  dplyr::group_by(season, team_id, team_name) |&gt;                                                  #\n  dplyr::summarize(wins = sum(wins), losses = sum(losses), .groups = \"drop\") |&gt;                   #\n  dplyr::mutate(win_pct = wins / (wins + losses)) |&gt;                                              #\n  dplyr::arrange(-win_pct)                                                                        #\n\nhead(record)                                                                                      #\n\n\nA tibble: 6 × 6\n\n\nseason\nteam_id\nteam_name\nwins\nlosses\nwin_pct\n\n\n&lt;chr&gt;\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n\n\n\n\n2022\n119\nLos Angeles Dodgers\n111\n51\n0.6851852\n\n\n2021\n137\nSan Francisco Giants\n107\n55\n0.6604938\n\n\n2022\n117\nHouston Astros\n107\n56\n0.6564417\n\n\n2021\n119\nLos Angeles Dodgers\n106\n56\n0.6543210\n\n\n2023\n144\nAtlanta Braves\n104\n58\n0.6419753\n\n\n2022\n121\nNew York Mets\n101\n61\n0.6234568\n\n\n\n\n\nEXERCISE #3\nCreate a function that takes in (1) a dataframe of games and (2) a value for the Pythagorean exponent alpha, and returns the actual winning percentage, Pythag winning percentage, and residual winning percentage for each team season.\n\ncalculate_record &lt;- function(game, alpha) {                                                       #\n\n  result_home &lt;- game |&gt;                                                                          #\n    dplyr::group_by(season, team_id = team_id_home, team_name = team_name_home) |&gt;                #\n    dplyr::summarize(                                                                             #\n      wins = sum(score_home &gt; score_away),                                                        #\n      losses = sum(score_home &lt; score_away),                                                      #\n      runs_scored = sum(score_home),                                                              #\n      runs_allowed = sum(score_away),                                                             #\n      .groups = \"drop\"                                                                            #\n    )                                                                                             #\n\n  result_away &lt;- game |&gt;                                                                          #\n    dplyr::group_by(season, team_id = team_id_away, team_name = team_name_away) |&gt;                #\n    dplyr::summarize(                                                                             #\n      wins = sum(score_home &lt; score_away),                                                        #\n      losses = sum(score_home &gt; score_away),                                                      #\n      runs_scored = sum(score_away),                                                              #\n      runs_allowed = sum(score_home),                                                             #\n      .groups = \"drop\"                                                                            #\n    )                                                                                             #\n\n  record &lt;- dplyr::bind_rows(result_home, result_away) |&gt;                                         #\n    dplyr::group_by(season, team_id, team_name) |&gt;                                                #\n    dplyr::summarize(                                                                             #\n      wins = sum(wins),                                                                           #\n      losses = sum(losses),                                                                       #\n      runs_scored = sum(runs_scored),                                                             #\n      runs_allowed = sum(runs_allowed),                                                           #\n      .groups = \"drop\"                                                                            #\n    ) |&gt;                                                                                          #\n    dplyr::mutate(                                                                                #\n      win_pct_actual = wins / (wins + losses),                                                    #\n      win_pct_pythag = runs_scored^alpha / (runs_scored^alpha + runs_allowed^alpha),              #\n      win_pct_residual = win_pct_actual - win_pct_pythag                                          #\n    )                                                                                             #\n\n  return(record)                                                                                  #\n}                                                                                                 #\n\ncalculate_record(game = game, alpha = 2) |&gt;                                                       #\n  head()                                                                                          #\n\n\nA tibble: 6 × 10\n\n\nseason\nteam_id\nteam_name\nwins\nlosses\nruns_scored\nruns_allowed\nwin_pct_actual\nwin_pct_pythag\nwin_pct_residual\n\n\n&lt;chr&gt;\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n2021\n108\nLos Angeles Angels\n77\n85\n723\n804\n0.4753086\n0.4471037\n0.028204989\n\n\n2021\n109\nArizona Diamondbacks\n53\n110\n684\n897\n0.3251534\n0.3676769\n-0.042523536\n\n\n2021\n110\nBaltimore Orioles\n52\n110\n659\n956\n0.3209877\n0.3221151\n-0.001127406\n\n\n2021\n111\nBoston Red Sox\n92\n70\n829\n749\n0.5679012\n0.5505671\n0.017334117\n\n\n2021\n112\nChicago Cubs\n71\n91\n705\n839\n0.4382716\n0.4138612\n0.024410366\n\n\n2021\n113\nCincinnati Reds\n83\n81\n793\n770\n0.5060976\n0.5147121\n-0.008614544\n\n\n\n\n\nEXERCISE #4\nCalculate the optimal alpha for the Pythagorean formula (i.e. the alpha that minimizes the average squared difference between actual and Pythag winning percentage, across teams).\n\nresult &lt;- tibble::tibble(                                                                         #\n  alpha = seq(from = 1, to = 3, by = 0.1),                                                        #\n  rmse = NA                                                                                       #\n)                                                                                                 #\n\nfor (i in 1:nrow(result)) {                                                                       #\n  result$rmse[i] &lt;- calculate_record(game = game, alpha = result$alpha[i]) |&gt;                     #\n    with(mean((win_pct_actual - win_pct_pythag)^2))                                               #\n}                                                                                                 #\n\nalpha_min &lt;- result |&gt;                                                                            #\n  dplyr::arrange(rmse) |&gt;                                                                         #\n  with(alpha[1])                                                                                  #\n\nprint(alpha_min)                                                                                  #\n\nresult |&gt;                                                                                         #\n  with(plot(alpha, rmse))                                                                         #\n\n[1] 1.7\n\n\n\n\n\n\n\n\n\nINTERLUDE\nWe use bootstrapping to estimate the noise variance of residual winning percentage.\n\nbootstrap_data &lt;- NULL                                                                            #\nB &lt;- 100                                                                                          #\n\nfor (b in 1:B) {                                                                                  #\n\n  bootstrap_sample &lt;- game |&gt;                                                                     #\n    dplyr::slice(sample(1:nrow(game), size = nrow(game), replace = TRUE)) |&gt;                      #\n    calculate_record(alpha = alpha_min) |&gt;                                                        #\n    tibble::add_column(bootstrap_sample = b, .before = 1)                                         #\n\n  bootstrap_data &lt;- dplyr::bind_rows(bootstrap_data, bootstrap_sample)                            #\n}                                                                                                 #\n\n# Estimate how much of the variance in residual winning percentage is noise                       #\nvar_residual_noise &lt;- bootstrap_data |&gt;                                                           #\n  dplyr::group_by(season, team_id, team_name) |&gt;                                                  #\n  dplyr::summarize(var_residual_noise = var(win_pct_residual), .groups = \"drop\") |&gt;               #\n  dplyr::summarize(var_residual_noise = mean(var_residual_noise), .groups = \"drop\") |&gt;            #\n  # We are calculating the noise variance for a full season, i.e. sigma^2_Z / 162.                #\n  # To get sigma^2_Z, we multiply by 162.                                                         #\n  with(162 * var_residual_noise)                                                                  #\n\nvar_residual_noise    # This is sigma^2_Z                                                         #\n\n0.0962668868488728\n\n\nEXERCISE #5\nEstimate \\(\\sigma^2_{\\eta}\\), the signal variance of residual winning percentage.\nUse the fact that the total variance \\(\\mbox{Var}(Y_i) = \\sigma^2_{\\eta} + \\sigma^2_Z / n\\).\n\nvar_residual_total &lt;- calculate_record(game, alpha = 1.7) |&gt;                                      #\n  with(var(win_pct_residual))                                                                     #\n\nvar_residual_signal &lt;- var_residual_total - var_residual_noise / 162                              #\n\nvar_residual_signal                                                                               #\n\n2.70575140334493e-05\n\n\nEXERCISE #6\nCalculate the sample size \\(n = \\sigma^2_z / \\sigma^2_\\eta\\) at which we switch from preferring Pythag winning percentage to preferring actual winning percentage.\nHint: We’re looking for something that can be done in one line of code.\n\nvar_residual_noise / var_residual_signal                                                          #\n\n3557.86147721719"
  },
  {
    "objectID": "teaching/index.html",
    "href": "teaching/index.html",
    "title": "Teaching",
    "section": "",
    "text": "SMGT 430/530: Introduction to Sport Analytics\nSpring 2024, Fall 2024\nSMGT 432/532: Soccer Analytics\nFall 2023\nSMGT 435/535: Baseball Analytics\nSpring 2024, Fall 2024"
  },
  {
    "objectID": "teaching/index.html#rice",
    "href": "teaching/index.html#rice",
    "title": "Teaching",
    "section": "",
    "text": "SMGT 430/530: Introduction to Sport Analytics\nSpring 2024, Fall 2024\nSMGT 432/532: Soccer Analytics\nFall 2023\nSMGT 435/535: Baseball Analytics\nSpring 2024, Fall 2024"
  },
  {
    "objectID": "teaching/index.html#stanford",
    "href": "teaching/index.html#stanford",
    "title": "Teaching",
    "section": "Stanford",
    "text": "Stanford\nSTATS 50: Mathematics of Sports\nSpring 2016"
  },
  {
    "objectID": "teaching/smgt430/notebook/pythagorean_formula_solutions.html",
    "href": "teaching/smgt430/notebook/pythagorean_formula_solutions.html",
    "title": "Preliminaries",
    "section": "",
    "text": "Preliminaries\nInstall the nflreader R package, which we’ll use to download game score data.\n\ninstall.packages(\"nflreadr\")                                                                      #\n\nInstalling package into ‘/usr/local/lib/R/site-library’\n(as ‘lib’ is unspecified)\n\n\n\n\n\nPart 1: Estimating the optimal \\(\\alpha\\) for the Pythagorean formula\nWe start with a dataset of game scores, and we want to caculate winning percentage and Pythagorean winning percentage for each team. We’ll start by assuming the Pythagorean exponent \\(\\alpha\\) is 2, but then we’ll work out the optimal value for \\(\\alpha\\).\n\ndata &lt;- nflreadr::load_schedules(seasons = 2021:2023) |&gt;                                          #\n  dplyr::filter(game_type == \"REG\")   # filter to regular season games                            #\n\nBecause of how our data are structured (one row per game with one team identified as the home team, the other as the away team), we will perform two separate aggregations, and then we will combine those aggregations into one.\nThe first aggregation calculates each team’s record, points scored and points allowed, in home gamesn. The second aggregation calculates each team’s record, points scored and points allowed, in away gamest. Then we combine the two separate aggregations.\n\n# Calculate each team's home record                                                               #\nrecord_home &lt;- data |&gt;                                                                            #\n  dplyr::group_by(season, team = home_team) |&gt;                                                    #\n  dplyr::summarize(                                                                               #\n    wins = sum(home_score &gt; away_score),                                                          #\n    losses = sum(home_score &lt; away_score),                                                        #\n    ties = sum(home_score == away_score),                                                         #\n    points_scored = sum(home_score),                                                              #\n    points_allowed = sum(away_score),                                                             #\n    .groups = \"drop\"                                                                              #\n  )                                                                                               #\n\n# Calculate each team's away record                                                               #\nrecord_away &lt;- data |&gt;                                                                            #\n  dplyr::group_by(season, team = away_team) |&gt;                                                    #\n  dplyr::summarize(                                                                               #\n    wins = sum(away_score &gt; home_score),                                                          #\n    losses = sum(away_score &lt; home_score),                                                        #\n    ties = sum(away_score == home_score),                                                         #\n    points_scored = sum(away_score),                                                              #\n    points_allowed = sum(home_score),                                                             #\n    .groups = \"drop\"                                                                              #\n  )                                                                                               #\n\n# Calculate each team's record (combining their wins and their losses)                            #\nrecord &lt;- dplyr::bind_rows(record_home, record_away) |&gt;                                           #\n  dplyr::group_by(season, team) |&gt;                                                                #\n  dplyr::summarize(                                                                               #\n    wins = sum(wins),                                                                             #\n    losses = sum(losses),                                                                         #\n    ties = sum(ties),                                                                             #\n    points_scored = sum(points_scored),                                                           #\n    points_allowed = sum(points_allowed),                                                         #\n    .groups = \"drop\"                                                                              #\n  )                                                                                               #\n\nhead(record)                                                                                      #\n\n\nA tibble: 6 × 7\n\n\nseason\nteam\nwins\nlosses\nties\npoints_scored\npoints_allowed\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n\n\n\n\n2021\nARI\n11\n6\n0\n449\n366\n\n\n2021\nATL\n7\n10\n0\n313\n459\n\n\n2021\nBAL\n8\n9\n0\n387\n392\n\n\n2021\nBUF\n11\n6\n0\n483\n289\n\n\n2021\nCAR\n5\n12\n0\n304\n404\n\n\n2021\nCHI\n6\n11\n0\n311\n407\n\n\n\n\n\nEXERCISE #0\nCalculate each team’s Pythagorean winning percentage in each season, assuming the Pythagorean exponent \\(\\alpha\\) is 2. What are the strongest team-seasons by Pythagorean winning percentage?\n\nalpha &lt;- 2                                                                                        #\n\nwin_pct &lt;- record |&gt;                                                                              #\n  dplyr::mutate(                                                                                  #\n    games = wins + losses,  # exclude ties from record calculation                                #\n    actual_win_pct = wins / games,                                                                #\n    pythag_win_pct = points_scored^alpha / (points_scored^alpha + points_allowed^alpha)           #\n  ) |&gt;                                                                                            #\n  dplyr::select(season, team, games, wins, losses, actual_win_pct, pythag_win_pct)                #\n\nwin_pct |&gt;                                                                                        #\n  dplyr::arrange(-pythag_win_pct) |&gt;                                                              #\n  head()                                                                                          #\n\n\nA tibble: 6 × 7\n\n\nseason\nteam\ngames\nwins\nlosses\nactual_win_pct\npythag_win_pct\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n2023\nBAL\n17\n13\n4\n0.7647059\n0.7484672\n\n\n2021\nBUF\n17\n11\n6\n0.6470588\n0.7363688\n\n\n2023\nSF\n17\n12\n5\n0.7058824\n0.7308032\n\n\n2022\nSF\n17\n13\n4\n0.7647059\n0.7252112\n\n\n2023\nDAL\n17\n12\n5\n0.7058824\n0.7230719\n\n\n2022\nBUF\n16\n13\n3\n0.8125000\n0.7167934\n\n\n\n\n\nEXERCISE #1\nPlot Pythagorean winning percentage (x-axis) vs. observed winning percentage (y-axis), and calculate the error: Across all team-seasons, what is the average squared difference between actual winning percentage and Pythagorean winning percentage?\n\nwin_pct |&gt;                                                                                        #\n  with(plot(x = pythag_win_pct, y = actual_win_pct))                                              #\nabline(0, 1)                                                                                      #\n\nwin_pct |&gt;                                                                                        #\n  dplyr::summarize(error = mean((actual_win_pct - pythag_win_pct)^2))                             #\n\n\nA tibble: 1 × 1\n\n\nerror\n\n\n&lt;dbl&gt;\n\n\n\n\n0.007136893\n\n\n\n\n\n\n\n\n\n\n\n\nEXERCISE #2\nCreate a function that takes in (1) a dataframe of games and (2) a value for the Pythagorean exponent alpha, and returns the actual winning percentage, Pythag winning percentage, and residual winning percentage for each team-season.\n\ncalculate_win_pct &lt;- function(record, alpha) {                                                    #\n\n  win_pct &lt;- record |&gt;                                                                            #\n    dplyr::mutate(                                                                                #\n      games = wins + losses,                                                                      #\n      actual_win_pct = wins / games,                                                              #\n      pythag_win_pct = points_scored^alpha / (points_scored^alpha + points_allowed^alpha)         #\n    ) |&gt;                                                                                          #\n    dplyr::select(team, games, wins, losses, actual_win_pct, pythag_win_pct)                      #\n\n  return(win_pct)                                                                                 #\n}                                                                                                 #\n\nEXERCISE #3\nCreate a vector of different possible values of \\(\\alpha\\), ranging from 0 to 10, with increments of 0.1 (so the sequence is 0.0, 0.1, 0.2, …, 9.9, 10.0). Use a for loop to loop over every possible value of \\(\\alpha\\), and calculate the error corresponding to that value of \\(\\alpha\\). Which value of \\(\\alpha\\) leads to the smallest error?\nTo see a hint, double click here. \n\ngrid_alpha &lt;- seq(from = 0, to = 10, by = 0.1)                                                    #\nerror &lt;- rep(NA, length(grid_alpha))                                                              #\n\nfor (i in 1:length(grid_alpha)) {                                                                 #\n\n  win_pct &lt;- calculate_win_pct(record, grid_alpha[i])                                             #\n\n  error[i] &lt;- win_pct |&gt;                                                                          #\n    dplyr::summarize(error = mean((actual_win_pct - pythag_win_pct)^2)) |&gt;                        #\n    with(error)                                                                                   #\n}                                                                                                 #\n\nalpha_min &lt;- grid_alpha[which.min(error)]                                                         #\nprint(alpha_min)\nplot(grid_alpha, error)                                                                           #\n\n[1] 2.5\n\n\n\n\n\n\n\n\n\n\n\nPart 2: Evaluating the Effectiveness\nNow that we have determined the optimal value of \\(\\alpha\\) for our data, let’s compare the predictive value of Pythagorean winning percentage versus the predictive value of actual winning percentage. To do this, we’ll need to split our data into two halves. Because we’ll be peforming the same computations on each half of data, it will help to create a function that we can call multiple times (instead of duplicating code).\nEXERCISE #0\nCreate a function that takes in a dataframe of scores (like the one we read from a CSV at the top of this notebook) and returns a dataframe with each team’s wins, losses, points scored and points allowed in each season.\n\ncalculate_record &lt;- function(data) {                                                              #\n\n  # Calculate each team's home record                                                             #\n  record_home &lt;- data |&gt;                                                                          #\n    dplyr::group_by(season, team = home_team) |&gt;                                                  #\n    dplyr::summarize(                                                                             #\n      wins = sum(home_score &gt; away_score),                                                        #\n      losses = sum(home_score &lt; away_score),                                                      #\n      ties = sum(home_score == away_score),                                                       #\n      points_scored = sum(home_score),                                                            #\n      points_allowed = sum(away_score)                                                            #\n    )                                                                                             #\n\n  # Calculate each team's away record                                                             #\n  record_away &lt;- data |&gt;                                                                          #\n    dplyr::group_by(season, team = away_team) |&gt;                                                  #\n    dplyr::summarize(                                                                             #\n      wins = sum(away_score &gt; home_score),                                                        #\n      losses = sum(away_score &lt; home_score),                                                      #\n      ties = sum(away_score == home_score),                                                       #\n      points_scored = sum(away_score),                                                            #\n      points_allowed = sum(home_score)                                                            #\n    )                                                                                             #\n\n  # Calculate each team's record (combining their wins and their losses)                          #\n  record &lt;- dplyr::bind_rows(record_home, record_away) |&gt;                                         #\n    dplyr::group_by(season, team) |&gt;                                                              #\n    dplyr::summarize(                                                                             #\n      wins = sum(wins),                                                                           #\n      losses = sum(losses),                                                                       #\n      ties = sum(ties),                                                                           #\n      points_scored = sum(points_scored),                                                         #\n      points_allowed = sum(points_allowed)                                                        #\n    )                                                                                             #\n\n  return(record)                                                                                  #\n}                                                                                                 #\n\nEXERCISE #1\nCalculate actual winning percentage and Pythagorean winning percentage for each team in the first half of each season (games up to and including Week 9) and the second half of each season (games Week 10 and beyond).\n\nwin_pct_1 &lt;- data |&gt;                                                                              #\n  dplyr::filter(week &lt;= 9) |&gt;                                                                     #\n  calculate_record() |&gt;                                                                           #\n  calculate_win_pct(alpha = alpha_min)                                                            #\n\nwin_pct_2 &lt;- data |&gt;                                                                              #\n  dplyr::filter(week &gt;= 10) |&gt;                                                                    #\n  calculate_record() |&gt;                                                                           #\n  calculate_win_pct(alpha = alpha_min)                                                            #\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\nAdding missing grouping variables: `season`\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\nAdding missing grouping variables: `season`\n\n\nEXERCISE #2\nPlot first-half actual winning percentage vs. second-half actual winning percentage. Plot first-half Pythagorean winning percentage vs. second-half Pythagorean winning percentage. Which relationship looks stronger?\nTo see a hint, double click here. \n\nwin_pct &lt;- win_pct_1 |&gt;                                                                           #\n  dplyr::left_join(win_pct_2, by = c(\"season\", \"team\"), suffix = c(\"_1\", \"_2\"))                   #\n\nwith(win_pct, plot(actual_win_pct_1, actual_win_pct_2))                                           #\nwith(win_pct, plot(pythag_win_pct_1, pythag_win_pct_2))                                           #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEXERCISE #3\nCalculate the following correlations: 1. 1st half actual win pct vs. 2nd half actual win pct 2. 1st half Pythag win pct vs. 2nd half Pythag win pct 3. 1st half Pythag win pct vs. 2nd half actual win pct 4. 1st half residual (actual - Pythag) win pct vs. 2nd half residual (actual - Pythag) win pct\nWhat is your interpretation of the results?\n\nwith(win_pct, cor(actual_win_pct_1, actual_win_pct_2))                                            #\nwith(win_pct, cor(pythag_win_pct_1, pythag_win_pct_2))                                            #\nwith(win_pct, cor(pythag_win_pct_1, actual_win_pct_2))                                            #\nwith(win_pct, cor(actual_win_pct_1 - pythag_win_pct_1, actual_win_pct_2 - pythag_win_pct_2))      #\n\n0.224147643576831\n\n\n0.462010395294361\n\n\n0.384118870695803\n\n\n-0.0276350463009359\n\n\nEXERCISE #4 (Challenge)\nHow much uncertainty is there in the estimated correlations from Exercise #3? In other words, what is the standard error on the correlations you estimated? How does this affect your qualitative interpretation of the results?"
  }
]